apiVersion: v1
kind: Pod
metadata:
  name: {{ .Release.Name }}-tcpdump-pod
  labels:
    app: tcpdump
    release: {{ .Release.Name }}
  annotations:
    description: "Pod for running tcpdump" 
spec:
  hostNetwork: true
  nodeSelector:
{{ toYaml .Values.nodeSelector | indent 4 }}
  tolerations:
{{ toYaml .Values.tolerations | indent 4 }}
  containers:
  - name: tcp-container
    image: "{{ .Values.repository.path }}{{ .Values.docker.image }}"
    imagePullPolicy: Always
    env:
      - name: PCAP_PATH 
        value: {{ .Values.env.pcap.hostpath }}
    stdin: true
    tty: true
    command:
      - bash
      - "-c"
      - |
        echo "{{ .Values.repository.password }}" | base64 -d | docker login -u "{{ .Values.repository.user }}" --password-stdin "{{ .Values.repository.path }}" 
        if docker inspect "{{ .Values.repository.path }}{{ .Values.tcpdump.image }}" &>/dev/null; then
             echo "Docker image already exists locally, skipping pull."
        else
             docker pull "{{ .Values.repository.path }}{{ .Values.tcpdump.image }}"
        fi
        while true; do
           find "{{ .Values.env.pcap.hostpath }}" -name "*.pcap" -type f -mtime +{{ .Values.env.pcap.noofdays }} -exec rm {} \;
           find "{{ .Values.env.pcap.hostpath }}" -name "*.pcap" -type f -size +{{ .Values.env.pcap.sizeinGB }} -exec rm {} \;
           sleep 900; # for 15 min
        done
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 200m
        memory: 256Mi
    volumeMounts:
    - name: docker-socket
      mountPath: /var/run/docker.sock
    - name: pcap-dir
      mountPath: /tmp/tcpdump/
  volumes:
  - name: docker-socket
    hostPath:
      path: /var/run/docker.sock
  - name: pcap-dir
    hostPath:
      path: {{ .Values.env.pcap.hostpath }} 
